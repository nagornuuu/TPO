/**
 *
 *  @author Nahornyi Andrii S24918
 *
 */

package zad1;

import java.util.List;
import java.util.concurrent.ExecutionException;

public class ClientTask implements Runnable {
    private final Client c;                     // the client to use
    private final List<String> reqs;            // list of requests to send
    private final boolean showResults;          // boolean flag to indicate whether to display results
    private String userLogs;                    // variable to store log messages

    // Constructor for ClientTask class.
    // Initializes the client, requests, and showResults fields.
    public ClientTask(Client c, List<String> reqs, boolean showResults) {
        this.c = c;
        this.reqs = reqs;
        this.showResults = showResults;
    }

    // Factory method to create a new instance of the ClientTask class.
    public static ClientTask create(Client c, List<String> reqs, boolean showRes) {
        return new ClientTask(c, reqs, showRes);
    }

    // Method to execute the task.
    // Connects to the client, sends a login message with the client ID, sends each request,
    // and displays the results if the showResults flag is true.
    // Stores the log transfer message in the userLogs variable.
    @Override
    public void run() {
        c.connect();
        c.send("login " + c.id);
        for (String req : reqs) {
            String res = c.send(req);
            if (showResults) {
                System.out.println(res);
            }
        }
        userLogs = c.send("bye and log transfer");
    }

    // Method to get the log messages generated by the client.
    // Waits for 100 milliseconds and returns the userLogs field.
    public String get() throws ExecutionException, InterruptedException {
        Thread.sleep(100);
        return userLogs;
    }
}
